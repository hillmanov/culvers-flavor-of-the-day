{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["dayjs","extend","advancedFormat","model","types","optional","array","enumeration","string","FlavorOfTheDay","date","flavor","image","AppController","state","currentDate","format","filter","flavorsOfTheDay","actions","self","afterCreate","getFlavorsOfTheDay","flow","axios","get","data","console","error","setFilter","views","isBefore","endOf","isSame","isAfter","map","filterdFlavorsOfThDay","current","className","classNames","key","alt","src","FilterButton","activeFilter","active","onClick","startCase","App","props","c","create","this","content","React","Component","observer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mXASAA,IAAMC,OAAOC,K,IAGXC,EAKEC,IALFD,MACAE,EAIED,IAJFC,SACAC,EAGEF,IAHFE,MACAC,EAEEH,IAFFG,YACAC,EACEJ,IADFI,OAGIC,EAAiBN,EAAM,iBAAkB,CAC7CO,KAAMF,EACNG,OAAQH,EACRI,MAAOJ,IAGHK,EAAgBV,EAAM,gBAAiB,CAC3CW,MAAOT,EAASE,EAAY,CAAC,UAAW,SAAU,UAAW,WAC7DQ,YAAaV,EAASG,EAAQR,MAAQgB,OAAO,eAC7CC,OAAQZ,EAASE,EAAY,CAAC,MAAO,YAAa,kBAAmB,YAAa,UAAW,mBAC7FW,gBAAiBZ,EAAMG,KAExBU,SAAQ,SAAAC,GAAI,MAAK,CAChBC,YADgB,WAEdD,EAAKE,sBAEPA,mBAAoBC,YAAI,UAAC,SAAUD,IAAV,yEAGa,OAFpCF,EAAKN,MAAQ,UADU,kBAGmBU,IAAMC,IAAI,QAH7B,gBAGPP,EAHO,EAGbQ,KACRN,EAAKF,gBAAkBA,EACvBE,EAAKN,MAAQ,SALQ,kDAOrBa,QAAQC,MAAR,MACAR,EAAKN,MAAQ,QARQ,qCAAUQ,EAAV,mBAWzBO,UAfgB,SAeNZ,GACRG,EAAKH,OAASA,OAGjBa,OAAM,SAAAV,GAAI,MAAK,CACd,4BACE,OAAQA,EAAKH,QACX,IAAK,MACH,OAAOG,EAAKF,gBACd,IAAK,YACH,OAAOD,iBAAOG,EAAKF,iBAAiB,YAAe,IAAZR,EAAW,EAAXA,KACrC,OAAOV,IAAMU,GAAMqB,SAAS/B,MAAQgC,MAAM,aAE9C,IAAK,kBACH,OAAOf,iBAAOG,EAAKF,iBAAiB,YAAe,IAAZR,EAAW,EAAXA,KACrC,OAAQV,IAAMU,GAAMuB,OAAOjC,IAAMoB,EAAKL,eAAiBf,IAAMU,GAAMwB,QAAQlC,IAAMoB,EAAKL,gBAAkBf,IAAMU,GAAMqB,SAAS/B,MAAQgC,MAAM,aAE/I,IAAK,QACH,OAAOf,iBAAOG,EAAKF,iBAAiB,YAAe,IAAZR,EAAW,EAAXA,KACrC,OAAOV,IAAMU,GAAMuB,OAAOjC,IAAMoB,EAAKL,iBAEzC,IAAK,YACH,OAAOE,iBAAOG,EAAKF,iBAAiB,YAAe,IAAZR,EAAW,EAAXA,KACrC,OAAOV,IAAMU,GAAMwB,QAAQlC,MAAQgC,MAAM,aAE7C,QACE,OAAO,OAGb,cACE,OAAOZ,EAAKA,EAAKN,QAEnB,cACE,OACE,4CAGJ,aACE,OAAOqB,cAAIf,EAAKgB,uBAAuB,YAA8B,IAA3B1B,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAChDyB,EAAU3B,IAASU,EAAKL,YAC9B,OACE,yBAAKuB,UAAWC,IAAW,iBAAkB,CAAEF,YAAaG,IAAK9B,GAC/D,6BACE,yBAAK4B,UAAU,QAAQtC,IAAMU,GAAMM,OAAO,WAA1C,IAAuDqB,EAAU,UAAY,IAC7E,yBAAKC,UAAU,UAAU3B,IAE3B,6BACE,yBAAK2B,UAAU,QAAQG,IAAK9B,EAAQ+B,IAAK9B,UAMnD,YACE,OACE,2CAKA+B,EAAe,SAAC,GAAD,IAAG1B,EAAH,EAAGA,OAAQY,EAAX,EAAWA,UAAWe,EAAtB,EAAsBA,aAAtB,OACnB,yBACEN,UAAWC,IAAW,SAAU,CAAEM,OAAQ5B,IAAW2B,IACrDE,QAAS,kBAAMjB,EAAUZ,KAExB8B,oBAAU9B,KAIT+B,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,EAAIrC,EAAcsC,SAFN,E,qDAMjB,OACE,yBAAKb,UAAW,OACd,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAcrB,OAAO,MAAkBY,UAAWuB,KAAKF,EAAErB,UAAWe,aAAcQ,KAAKF,EAAEjC,SACzF,kBAAC,EAAD,CAAcA,OAAO,YAAkBY,UAAWuB,KAAKF,EAAErB,UAAWe,aAAcQ,KAAKF,EAAEjC,SACzF,kBAAC,EAAD,CAAcA,OAAO,kBAAkBY,UAAWuB,KAAKF,EAAErB,UAAWe,aAAcQ,KAAKF,EAAEjC,SACzF,kBAAC,EAAD,CAAcA,OAAO,YAAkBY,UAAWuB,KAAKF,EAAErB,UAAWe,aAAcQ,KAAKF,EAAEjC,SACzF,kBAAC,EAAD,CAAcA,OAAO,QAAkBY,UAAWuB,KAAKF,EAAErB,UAAWe,aAAcQ,KAAKF,EAAEjC,UAE1FmC,KAAKF,EAAEG,a,GAhBEC,IAAMC,WAsBTC,cAASR,GC7HlBS,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1D,QACfoD,UAAUC,cAAcQ,YAI1BhD,QAAQiD,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB3C,QAAQiD,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAnD,GACLD,QAAQC,MAAM,4CAA6CA,MC1FjEoD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,GAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQlE,IAAI,gBAEnB,MAApBmE,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLpD,QAAQiD,IACN,oEAvFAuB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjC1C,QAAQiD,IACN,iHAMJb,EAAgBC,EAAOC,OCrC/BE,K","file":"static/js/main.9e821e1a.chunk.js","sourcesContent":["import React from 'react';\nimport { map, filter, startCase } from 'lodash';\nimport './app.css';\nimport { observer } from 'mobx-react';\nimport { types, flow } from 'mobx-state-tree';\nimport axios from 'axios';\nimport dayjs from 'dayjs';\nimport advancedFormat from 'dayjs/plugin/advancedFormat';\nimport classNames from 'classnames';\ndayjs.extend(advancedFormat)\n\nconst {\n  model,\n  optional,\n  array,\n  enumeration,\n  string,\n} = types;\n\nconst FlavorOfTheDay = model('FlavorOfTheDay', {\n  date: string,\n  flavor: string,\n  image: string,\n});\n\nconst AppController = model('AppController', {\n  state: optional(enumeration(['loading', 'loaded', 'error']), 'loading'),\n  currentDate: optional(string, dayjs().format('YYYY-MM-DD')),\n  filter: optional(enumeration(['all', 'thisMonth', 'restOfThisMonth', 'nextMonth', 'today']), 'restOfThisMonth'),\n  flavorsOfTheDay: array(FlavorOfTheDay)\n})\n.actions(self => ({\n  afterCreate() {\n    self.getFlavorsOfTheDay();\n  },\n  getFlavorsOfTheDay: flow(function* getFlavorsOfTheDay() {\n    self.state = 'loading';\n    try {\n      const { data: flavorsOfTheDay } = yield axios.get('/api');\n      self.flavorsOfTheDay = flavorsOfTheDay;\n      self.state = 'loaded';\n    } catch (e) {\n      console.error(e);\n      self.state = 'error';\n    }\n  }),\n  setFilter(filter) {\n    self.filter = filter;\n  }\n}))\n.views(self => ({\n  get filterdFlavorsOfThDay() {\n    switch (self.filter) {\n      case 'all':\n        return self.flavorsOfTheDay;\n      case 'thisMonth':\n        return filter(self.flavorsOfTheDay, ({ date }) => {\n          return dayjs(date).isBefore(dayjs().endOf('month'));\n        });\n      case 'restOfThisMonth':\n        return filter(self.flavorsOfTheDay, ({ date }) => {\n          return (dayjs(date).isSame(dayjs(self.currentDate)) || dayjs(date).isAfter(dayjs(self.currentDate))) && dayjs(date).isBefore(dayjs().endOf('month'));\n        });\n      case 'today':\n        return filter(self.flavorsOfTheDay, ({ date }) => {\n          return dayjs(date).isSame(dayjs(self.currentDate));\n        });\n      case 'nextMonth':\n        return filter(self.flavorsOfTheDay, ({ date }) => {\n          return dayjs(date).isAfter(dayjs().endOf('month'))\n        });\n      default: \n        return null;\n    }\n  },\n  get content() {\n    return self[self.state];\n  },\n  get loading() {\n    return (\n      <div>Loading...</div>\n    );\n  },\n  get loaded() {\n    return map(self.filterdFlavorsOfThDay, ({ date, flavor, image }) => {\n      const current = date === self.currentDate;\n      return (\n        <div className={classNames('flavorOfTheDay', { current })}  key={date}>\n          <div>\n            <div className=\"date\">{dayjs(date).format('MMMM Do')} {current ? '(Today)' : ''}</div>\n            <div className=\"flavor\">{flavor}</div>\n          </div>\n          <div>\n            <img className=\"image\" alt={flavor} src={image} />\n          </div>\n        </div>\n      )\n    });\n  },\n  get error() {\n    return (\n      <div>Error</div>\n    );\n  },\n}));\n\nconst FilterButton = ({ filter, setFilter, activeFilter }) => (\n  <div \n    className={classNames('filter', { active: filter === activeFilter})} \n    onClick={() => setFilter(filter)}\n    >\n    {startCase(filter)}\n  </div>\n);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.c = AppController.create();\n  }\n\n  render() {\n    return (\n      <div className={'app'}>\n        <div className=\"filters\">\n          <FilterButton filter=\"all\"             setFilter={this.c.setFilter} activeFilter={this.c.filter} />\n          <FilterButton filter=\"thisMonth\"       setFilter={this.c.setFilter} activeFilter={this.c.filter} />\n          <FilterButton filter=\"restOfThisMonth\" setFilter={this.c.setFilter} activeFilter={this.c.filter} />\n          <FilterButton filter=\"nextMonth\"       setFilter={this.c.setFilter} activeFilter={this.c.filter} />\n          <FilterButton filter=\"today\"           setFilter={this.c.setFilter} activeFilter={this.c.filter} />\n        </div>\n        {this.c.content}\n      </div>\n    );\n  }\n};\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}